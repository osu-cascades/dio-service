{"version":3,"sources":["../app.js"],"names":["dotenv","require","config","express","logger","path","bodyParser","Sequelize","api","app","sequelize","process","env","JAWSDB_URL","authenticate","then","console","log","catch","err","error","set","resolve","__dirname","use","json","urlencoded","extended","static","join","req","res","next","header","get","request","response","send","status","end","listen","PORT","address","port","settings","module","exports"],"mappings":";;AAAA,IAAMA,SAAgBC,QAAQ,QAAR,EAAkBC,MAAlB,EAAtB;AACA,IAAMC,UAAgBF,QAAQ,SAAR,CAAtB;AACA,IAAMG,SAAgBH,QAAQ,QAAR,CAAtB;AACA,IAAMI,OAAgBJ,QAAQ,MAAR,CAAtB;AACA,IAAMK,aAAgBL,QAAQ,aAAR,CAAtB;AACA,IAAMM,YAAgBN,QAAQ,WAAR,CAAtB;AACA,IAAMO,MAAgBP,QAAQ,iBAAR,CAAtB;;AAEA,IAAMQ,MAAMN,SAAZ;AACA,IAAMO,YAAY,IAAIH,SAAJ,CAAcI,QAAQC,GAAR,CAAYC,UAA1B,CAAlB;;AAEAH,UAAUI,YAAV,GAAyBC,IAAzB,CAA8B,YAAY;AACtCC,YAAQC,GAAR,CAAY,+CAAZ;AACH,CAFD,EAEGC,KAFH,CAES,UAACC,GAAD,EAAS;AACdH,YAAQI,KAAR,CAAc,oCAAd,EAAoDD,GAApD;AACH,CAJD;;AAMAV,IAAIY,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAZ,IAAIY,GAAJ,CAAQ,OAAR,EAAiBhB,KAAKiB,OAAL,CAAaC,SAAb,EAAwB,OAAxB,CAAjB;AACAd,IAAIe,GAAJ,CAAQpB,OAAO,KAAP,CAAR;AACAK,IAAIe,GAAJ,CAAQlB,WAAWmB,IAAX,EAAR;AACAhB,IAAIe,GAAJ,CAAQlB,WAAWoB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAlB,IAAIe,GAAJ,CAAQrB,QAAQyB,MAAR,CAAevB,KAAKwB,IAAL,CAAUN,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAd,IAAIe,GAAJ,CAAQ,UAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBD,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,gDAA3C;AACAD;AACH,CAJD;AAKAvB,IAAIyB,GAAJ,CAAQ,GAAR,EAAa,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAChCA,aAASC,IAAT,CAAc,kBAAd;AACH,CAFD;AAGA5B,IAAIe,GAAJ,CAAQ,SAAR,EAAmBhB,GAAnB;AACAC,IAAIe,GAAJ,CAAQ,UAACM,GAAD,EAAMC,GAAN,EAAc;AAClBA,QAAIO,MAAJ,CAAW,GAAX;AACAP,QAAIQ,GAAJ,CAAQ,WAAR;AACH,CAHD;;AAKA9B,IAAI+B,MAAJ,CAAW7B,QAAQC,GAAR,CAAY6B,IAAZ,IAAoB,IAA/B,EAAqC,YAAY;AAC7CzB,YAAQC,GAAR,CAAY,gDAAZ,EAA8D,KAAKyB,OAAL,GAAeC,IAA7E,EAAmFlC,IAAImC,QAAJ,CAAahC,GAAhG;AACH,CAFD;;AAIAiC,OAAOC,OAAP,GAAiBrC,GAAjB","file":"app.js","sourcesContent":["const dotenv        = require('dotenv').config();\nconst express       = require('express');\nconst logger        = require('morgan');\nconst path          = require('path');\nconst bodyParser    = require('body-parser');\nconst Sequelize     = require('sequelize');\nconst api           = require('./routes/api.js');\n\nconst app = express();\nconst sequelize = new Sequelize(process.env.JAWSDB_URL);\n\nsequelize.authenticate().then(function () {\n    console.log('Connection has been established successfully.');\n}).catch((err) => {\n    console.error('Unable to connect to the database:', err);\n});\n\napp.set('view engine', 'ejs');\napp.set('views', path.resolve(__dirname, 'views'));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use((req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    next();\n});\napp.get('/', (request, response) => {\n    response.send('DiO Service API!');\n});\napp.use('/api/v1', api);\napp.use((req, res) => {\n    res.status(400);\n    res.end('Not Found');\n});\n\napp.listen(process.env.PORT || 3000, function () {\n    console.log(\"Express server listening on port %d in %s mode\", this.address().port, app.settings.env);\n});\n\nmodule.exports = app;"]}